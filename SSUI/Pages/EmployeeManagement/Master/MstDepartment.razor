@page "/department"
<style>
    #dashboard-top {
        width: 100%;
        height: 30vh;
        margin-bottom: 10px;
        border-radius: 20px;
        padding: 15px;
        background: linear-gradient(179.4deg, rgb(10, 20, 69) -16.9%, rgb(50, 30, 84) 119.9%);
    }

    #dashboard-bottom {
        width: 100%;
        height: 50vh;
        border-radius: 20px;
        padding: 15px;
        background: linear-gradient(179.4deg, rgb(10, 20, 69) -16.9%, rgb(50, 30, 84) 119.9%);
    }

    #switch-fix {
        display: flex;
        margin-top: 15px;
    }

    .form-switch {
        margin-left: 20px;
    }

    #dashboard-bottom .mud-table {
        height: 100%;
        overflow-y: scroll;
        border-radius: 20px;
    }
</style>
<PageTitle>Department</PageTitle>

<h1>Department</h1>

@using System.Net.Http.Json
@using SSUI.Services.Interface.EmployeeManagement.Master
@inject HttpClient httpClient

<div id="dashboard-top">
    <EditForm Model="@formData" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <InputText id="title" @bind-Value="formData.Title" class="form-control" placeholder="Title" />
        </div>
        <div id="switch-fix" class="form-group">
            <label class="form-check-label" for="flexSwitchCheckChecked" style="color:white;">Status</label>
            <div class="form-group form-switch">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind-value="formData.Status">
            </div>
        </div>

        <div class="d-flex justify-content-start mt-3">
            <button type="button" class="btn btn-secondary mr-2" @onclick="ClearForm">Clear</button>
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </EditForm>
</div>

<div id="dashboard-bottom" class="table-container">
    <MudTable Items="@Elements" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<vmMasterData,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Virtualize="true" FixedHeader="true" FixedFooter="true" Height="63%">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Departments</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Actions</MudTh>
            <MudTh>Serial No.</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>

        <RowTemplate>
            <MudTd DataLabel="Actions" Style="width:200px;">
                <button class="btn btn-success">Edit</button>
                <button class="btn btn-danger">Delete</button>
            </MudTd>
            <MudTd DataLabel="Serial No." Style="width:100px;">@(@Elements.IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Status" Style="width:100px;">@context.flgActive</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

@code {
    private FormData formData = new FormData();

    [Inject]
    public IDepartment dept { get; set; }
    private void HandleSubmit()
    {
        // Handle form submission logic here
        Console.WriteLine($"Title: {formData.Title}, Status: {formData.Status}");
    }

    private void ClearForm()
    {
        formData = new FormData();
    }

    private class FormData
    {
        public string Title { get; set; }
        public bool Status { get; set; }
    }

    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private vmMasterData selectedItem1 = null;
    private List<vmMasterData> Elements = new List<vmMasterData>();

    public MstDepartment() { }
    public MstDepartment(IDepartment dept)
    {
        this.dept = dept;
    }

    protected override async Task OnInitializedAsync()
    {
        Elements = await dept.ListDepartments();
    }

    private bool FilterFunc1(vmMasterData element) => FilterFunc(element, searchString1);

    private bool FilterFunc(vmMasterData element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
