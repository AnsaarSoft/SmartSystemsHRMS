@page "/countries"
@using System.Net.Http.Json
@using SSUI.Services.Interface.EmployeeManagement.Master
@inject HttpClient httpClient

<style>
    #dashboard-top {
        width: 100%;
        height: 30vh;
        margin-bottom: 10px;
        border-radius: 20px;
        padding: 15px;
        background: linear-gradient(179.4deg, rgb(10, 20, 69) -16.9%, rgb(50, 30, 84) 119.9%);
    }

    #dashboard-bottom {
        width: 100%;
        height: 50vh;
        border-radius: 20px;
        padding: 15px;
        background: linear-gradient(179.4deg, rgb(10, 20, 69) -16.9%, rgb(50, 30, 84) 119.9%);
    }

    #switch-fix {
        display: flex;
        margin-top: 15px;
    }

    .form-switch {
        margin-left: 20px;
    }

    #dashboard-bottom .mud-table {
        height: 100%;
        overflow-y: scroll;
        border-radius: 20px;
    }
</style>

<PageTitle>Country Management</PageTitle>

<h1>Countries</h1>

<div id="dashboard-top">
    <EditForm Model="@formData" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText id="title" hidden @bind-Value="formData.Id" class="form-control" placeholder="Title" />
        <div class="form-group">
            <InputText id="title" @bind-Value="formData.Title" class="form-control" placeholder="Title" />
        </div>
        <div id="switch-fix" class="form-group">
            <label class="form-check-label" for="flexSwitchCheckChecked" style="color:white;">Status</label>
            <div class="form-group form-switch">
                <input class="form-check-input" type="checkbox" id="flexSwitchCheckChecked" @bind="formData.flgActive">
            </div>
        </div>

        <div class="d-flex justify-content-start mt-3">
            <button type="button" class="btn btn-secondary mr-2" @onclick="ClearForm">Clear</button>
            <button type="submit" class="btn btn-success">Save</button>
        </div>
    </EditForm>
</div>

<div id="dashboard-bottom" class="table-container">
    <MudTable Items="@Entities" Filter="new Func<vmMasterData,bool>(SearchFunction)" @bind-SelectedItem="SelectedEntity" Virtualize="true" FixedHeader="true" FixedFooter="true" Height="63%">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Countries</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="UserSearch" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Actions</MudTh>
            <MudTh>Serial No.</MudTh>
            <MudTh>Title</MudTh>
            <MudTh>Status</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Actions" Style="width:200px;">
                <button class="btn btn-success" @onclick="() => EditCountry(context.Id)">Edit</button>
                <button class="btn btn-danger" @onclick="() => ConfirmDelete(context.Id)">Delete</button>
            </MudTd>
            <MudTd DataLabel="Serial No." Style="width:100px;">@(@Entities.IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Status" Style="width:100px;">@context.flgActive</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
</div>

<MudDialog @bind-IsVisible="@isDeleteDialogVisible">
    <DialogContent>
        <MudText Typo="Typo.h6">Delete Confirmation</MudText>
        <MudText>Are you sure you want to delete this country?</MudText>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="DeleteCountryConfirmed">Yes</MudButton>
        <MudButton Color="Color.Secondary" OnClick="() => isDeleteDialogVisible = false">No</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private vmMasterData formData = new vmMasterData();
    private bool isDeleteDialogVisible = false;
    private string countryIdToDelete;
    private string UserSearch = "";
    private vmMasterData SelectedEntity;
    private List<vmMasterData?> Entities = new List<vmMasterData>();

    [Inject]
    public ICountry obj { get; set; }

    public MstCountry() { }
    public MstCountry(ICountry obj)
    {
        this.obj = obj;
    }
    protected override async Task OnInitializedAsync()
    {
        Entities = await obj.ListCountries();
    }

    private async void HandleSubmit()
    {
        if (string.IsNullOrEmpty(formData.Id))
        {
            formData.Id = "00000000-0000-0000-0000-000000000000";
        }
        var result = await obj.ModifyCountry(formData);
        if (result != null)
        {
            ClearForm();
            Entities = await obj.ListCountries();
            StateHasChanged();
        }
    }

    private async void EditCountry(string Id)
    {
        var response = await obj.EditCountry(Id);
        if (response != null)
        {
            formData.Id = response.Id;
            formData.Title = response.Title;
            formData.flgActive = response.flgActive;
            await InvokeAsync(StateHasChanged);
        }
    }
    private void ConfirmDelete(string Id)
    {
        countryIdToDelete = Id;
        isDeleteDialogVisible = true;
    }

    private async void DeleteCountryConfirmed()
    {
        isDeleteDialogVisible = false;
        var response = await obj.RemoveCountry(countryIdToDelete);
        if (response == true)
        {
            ClearForm();
            var entities = await obj.ListCountries();
            Entities = entities ?? new List<vmMasterData>();
            StateHasChanged();
        }
    }

    private void ClearForm()
    {
        formData = new vmMasterData();
    }

    private bool SearchFunction(vmMasterData element) => Search(element, UserSearch);

    private bool Search(vmMasterData element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
